
	 Enter: 
		 1. number of nodes 
		 2. Number of edges 
		 3. Source node 
		 4. Destination node 
		 
	 Top-node: 0 edge-weight: 0
	 Considering node: 1 edge-weight: 1 	 v2: 1 D[v2] 1000000000
	 ** Inserting node: 1 edge-weight: 1	 v2: 1 D[v2] 1
	 Considering node: 2 edge-weight: 4 	 v2: 2 D[v2] 1000000000
	 ** Inserting node: 2 edge-weight: 4	 v2: 2 D[v2] 4
	 Considering node: 3 edge-weight: 2 	 v2: 3 D[v2] 1000000000
	 ** Inserting node: 3 edge-weight: 2	 v2: 3 D[v2] 2
	 Top-node: 1 edge-weight: 1
	 Considering node: 0 edge-weight: 1 	 v2: 0 D[v2] 0
	 Considering node: 4 edge-weight: 5 	 v2: 4 D[v2] 1000000000
	 ** Inserting node: 4 edge-weight: 5	 v2: 4 D[v2] 6
	 Considering node: 3 edge-weight: 2 	 v2: 3 D[v2] 2
	 Top-node: 3 edge-weight: 2
	 Considering node: 0 edge-weight: 2 	 v2: 0 D[v2] 0
	 Considering node: 2 edge-weight: 2 	 v2: 2 D[v2] 4
	 Considering node: 1 edge-weight: 2 	 v2: 1 D[v2] 1
	 Top-node: 2 edge-weight: 4
	 Considering node: 0 edge-weight: 4 	 v2: 0 D[v2] 0
	 Considering node: 4 edge-weight: 3 	 v2: 4 D[v2] 6
	 Considering node: 3 edge-weight: 2 	 v2: 3 D[v2] 2
	 Top-node: 4 edge-weight: 6
	 Considering node: 1 edge-weight: 5 	 v2: 1 D[v2] 1
	 Considering node: 2 edge-weight: 3 	 v2: 2 D[v2] 4
	 Considering node: 5 edge-weight: 4 	 v2: 5 D[v2] 1000000000
	 ** Inserting node: 5 edge-weight: 4	 v2: 5 D[v2] 10
	 Top-node: 5 edge-weight: 10
	 Considering node: 4 edge-weight: 4 	 v2: 4 D[v2] 6

	 Result: 10
	 
	  /*   vector<ii> accepted_nodes;
    vector<ii> accepted_nodes_ptr;    
    D[s]=0;
    accepted_nodes.push_back(ii(0,s));
    int v=(*accepted_nodes.begin()).second;
    for(vii::const_iterator it= G[v].begin();it!= G[v].end();it++)
    {
    	//cout<<"\n\t Node: "<<it->first<<" edge: "<<it->second;
    }*/
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
